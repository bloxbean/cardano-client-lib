plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenCentral()
}

dependencies {
    api project(':core')
    api project(':function')
    api project(':cip')
    api project(':quicktx')

}

compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'

    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

artifacts {
    archives jar
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Cardano Client Library'
                description = 'Cardano Client Library for Java'
                url = 'https://github.com/bloxbean/cardano-client-lib'
                licenses {
                    license {
                        name = 'The MIT License'
                        url = 'https://opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'satran004'
                        name = 'Satya'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/bloxbean/cardano-client-lib.git'
                    developerConnection = 'scm:git:ssh://git@github.com/bloxbean/cardano-client-lib.git'
                    url = 'https://github.com/bloxbean/cardano-client-lib'
                }
            }
        }
    }

    repositories {
        String ossrhUsername = System.getenv('MAVEN_USERNAME')
        String ossrhPassword = System.getenv('MAVEN_PASSWORD')

        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

if (isReleaseVersion && !project.hasProperty("skipSigning")) {
    signing {
        sign publishing.publications
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    repositories {
        mavenCentral()
    }

    //Jars are with cardano-client prefix
    archivesBaseName = 'cardano-client-' + project.name

    dependencies {
        api(libs.slf4j.api)

        compileOnly libs.lombok
        annotationProcessor libs.lombok

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
        testImplementation 'org.hamcrest:hamcrest-library:2.2'
        testImplementation 'org.mockito:mockito-inline:4.6.1'
        testImplementation 'org.mockito:mockito-junit-jupiter:4.6.1'
        testImplementation('org.assertj:assertj-core:3.23.1')
        testRuntimeOnly 'org.slf4j:slf4j-log4j12:1.7.36'

        testCompileOnly libs.lombok
        testAnnotationProcessor libs.lombok
    }

    compileJava {
        sourceCompatibility = '11'
        targetCompatibility = '11'

        options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
    }

    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }

    task sourceJar(type: Jar) {
        classifier "sources"
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {

        classifier "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }

    testing {
        suites {
            test {
                useJUnitJupiter()
            }

            integrationTest(JvmTestSuite) {
                sources {
                    java {
                        srcDirs = ['src/it/java']
                    }
                    resources {
                        srcDirs = ['src/it/resources']
                    }

                    compileClasspath += sourceSets.main.output + sourceSets.test.output
                    runtimeClasspath += sourceSets.main.output + sourceSets.test.output
                }

                tasks.named('processIntegrationTestResources') {
                    duplicatesStrategy = DuplicatesStrategy.INCLUDE
                }

                dependencies {
                    implementation project
                }

                targets {
                    all {
                        testTask.configure {
                            // set a system property for the test JVM(s)
                            systemProperty('BF_PROJECT_ID', findProperty("BF_PROJECT_ID"))
                        }
                    }
                }
            }
        }
    }

    configurations {
        integrationTestImplementation.extendsFrom testImplementation
        integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    }

    if (!name.equalsIgnoreCase("integration-test")) {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                    artifact(sourceJar) {
                        classifier = 'sources'
                    }
                    artifact(javadocJar) {
                        classifier = 'javadoc'
                    }
                    artifactId 'cardano-client-' + project.name
                    pom {
//                    name = publish_name
//                    description = publish_desc
                        url = 'https://github.com/bloxbean/cardano-client-lib'
                        licenses {
                            license {
                                name = 'The MIT License'
                                url = 'https://opensource.org/licenses/mit-license.php'
                            }
                        }
                        developers {
                            developer {
                                id = 'satran004'
                                name = 'Satya'
                            }
                        }
                        scm {
                            connection = 'scm:git:git://github.com/bloxbean/cardano-client-lib.git'
                            developerConnection = 'scm:git:ssh://git@github.com/bloxbean/cardano-client-lib.git'
                            url = 'https://github.com/bloxbean/cardano-client-lib'
                        }
                    }
                }
            }

            repositories {
                String ossrhUsername = System.getenv('MAVEN_USERNAME')
                String ossrhPassword = System.getenv('MAVEN_PASSWORD')

                maven {
                    def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                    def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    credentials {
                        username ossrhUsername
                        password ossrhPassword
                    }
                }
            }
        }
    }

    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    if (isReleaseVersion && !project.hasProperty("skipSigning")) {
        signing {
            sign publishing.publications
        }
    }
}
