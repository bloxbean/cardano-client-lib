package com.bloxbean.cardano.client.util;

import com.bloxbean.cardano.client.account.Account;
import com.bloxbean.cardano.client.address.Address;
import com.bloxbean.cardano.client.address.AddressService;
import com.bloxbean.cardano.client.api.model.Amount;
import com.bloxbean.cardano.client.api.model.Utxo;
import com.bloxbean.cardano.client.common.ADAConversionUtil;
import com.bloxbean.cardano.client.common.model.Networks;
import com.bloxbean.cardano.client.transaction.spec.PlutusV2Script;
import org.junit.jupiter.api.Test;

import java.math.BigInteger;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.stream.IntStream;

import static com.bloxbean.cardano.client.common.CardanoConstants.LOVELACE;
import static org.assertj.core.api.Assertions.assertThat;

class UtxoUtilTest {
    private Random random = new Random();

    @Test
    void getOwnerPubKeyHashes() {
        Utxo utxo1 = Utxo.builder()
                .txHash("2d8d602c311a07dfff18273b006b927a30f908b215fec0052b5aca97aa7b34b3")
                .outputIndex(0)
                .address("addr_test1wqe44q5knddmv9rldtw2k0vn8d2am4pujtj8mm9u0a0t5esed99ya")
                .amount(List.of(new Amount(LOVELACE, ADAConversionUtil.adaToLovelace(4))))
                .build();
        Utxo utxo2 = Utxo.builder()
                .txHash("2d8d602c311a07dfff18273b006b927a30f908b215fec0052b5aca97aa7b34b3")
                .outputIndex(1)
                .address("addr_test1qpkcp26l47j2fp4crdl9n83zmnw84qrp64sd5w6fwesqt6g8sd9mcktl67rn2t0cth25ryflz59yfxlx636csng7hawstfp400")
                .amount(List.of(new Amount(LOVELACE, ADAConversionUtil.adaToLovelace(10))))
                .build();
        Utxo utxo3 = Utxo.builder()
                .txHash("1d8d602c311a07dfff18273b006b927a30f908b215fec0052b5aca97aa7b34b3")
                .outputIndex(12)
                .address("addr_test1qpkcp26l47j2fp4crdl9n83zmnw84qrp64sd5w6fwesqt6g8sd9mcktl67rn2t0cth25ryflz59yfxlx636csng7hawstfp400")
                .amount(List.of(new Amount(LOVELACE, ADAConversionUtil.adaToLovelace(10))))
                .build();
        Utxo utxo4 = Utxo.builder()
                .txHash("8674de7f24b09e7cd31e807bd2215917f33c13e34b6ec3e610925c338b8545f0")
                .outputIndex(0)
                .address("addr_test1qqxnp3khzm7kcj9t23hskehat7428ghsenk0pfew4rqy5v9frnmht7uwrl073q4jvq20z82kh4rksyns540azhndqexqpvhgqr")
                .amount(List.of(new Amount(LOVELACE, ADAConversionUtil.adaToLovelace(10))))
                .build();

        Set<String> pubKeyHashes = UtxoUtil.getOwnerPubKeyHashes(Set.of(utxo1, utxo2, utxo3, utxo4));
        System.out.println(pubKeyHashes);
        assertThat(pubKeyHashes).hasSize(2);
        assertThat(pubKeyHashes).contains("6d80ab5fafa4a486b81b7e599e22dcdc7a8061d560da3b49766005e9",
                "0d30c6d716fd6c48ab546f0b66fd5faaa3a2f0ccecf0a72ea8c04a30");
    }

    @Test
    void getOwnerPubKeyHashes_randomAutoGenerated() throws Exception {
        Set<Utxo> utxos = new HashSet<>();
        IntStream.range(0, 10)
                .forEach(value -> {
                    Utxo utxo = Utxo.builder()
                            .address(new Account().baseAddress())
                            .txHash(getRandomHexString(64))
                            .outputIndex(value)
                            .amount(List.of(new Amount(LOVELACE, BigInteger.valueOf(random.nextInt()))))
                            .build();
                    utxos.add(utxo);
                });

        //Generate some script utxos
        PlutusV2Script plutusScript = PlutusV2Script.builder()
                .type("PlutusScriptV2")
                .cborHex("49480100002221200101")
                .build();
        IntStream.range(0, 15)
                .forEach(value -> {
                    try {
                        Address address = AddressService.getInstance().getBaseAddress(plutusScript,
                                new Account().hdKeyPair().getPublicKey(), Networks.testnet());
                        Utxo utxo = Utxo.builder()
                                .address(address.toBech32())
                                .txHash(getRandomHexString(64))
                                .outputIndex(value)
                                .amount(List.of(new Amount(LOVELACE, BigInteger.valueOf(random.nextInt()))))
                                .build();
                        utxos.add(utxo);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                });

        Set<String> pubKeyHashes = UtxoUtil.getOwnerPubKeyHashes(utxos);
        assertThat(pubKeyHashes).hasSize(10);
    }

    @Test
    void getByronAddressOwners() {
        Utxo utxo1 = Utxo.builder()
                .txHash("2d8d602c311a07dfff18273b006b927a30f908b215fec0052b5aca97aa7b34b3")
                .outputIndex(0)
                .address("DdzFFzCqrhssWKWXD5n5ScEZtEiQp46Y7bB4KYpm2tyjuoKC2CLtKfCgL2ySfC1goUagjLuuwALeHvWjQZxHHZkbXmb9Fqy4S5eHUZdU")
                .amount(List.of(new Amount(LOVELACE, ADAConversionUtil.adaToLovelace(4))))
                .build();
        Utxo utxo2 = Utxo.builder()
                .txHash("2d8d602c311a07dfff18273b006b927a30f908b215fec0052b5aca97aa7b34b3")
                .outputIndex(1)
                .address("addr_test1qpkcp26l47j2fp4crdl9n83zmnw84qrp64sd5w6fwesqt6g8sd9mcktl67rn2t0cth25ryflz59yfxlx636csng7hawstfp400")
                .amount(List.of(new Amount(LOVELACE, ADAConversionUtil.adaToLovelace(10))))
                .build();
        Utxo utxo3 = Utxo.builder()
                .txHash("1d8d602c311a07dfff18273b006b927a30f908b215fec0052b5aca97aa7b34b3")
                .outputIndex(12)
                .address("Ae2tdPwUPEZFRbyhz3cpfC2CumGzNkFBN2L42rcUc2yjQpEkxDbkPodpMAi")
                .amount(List.of(new Amount(LOVELACE, ADAConversionUtil.adaToLovelace(10))))
                .build();
        Utxo utxo4 = Utxo.builder()
                .txHash("8674de7f24b09e7cd31e807bd2215917f33c13e34b6ec3e610925c338b8545f0")
                .outputIndex(0)
                .address("addr_test1qqxnp3khzm7kcj9t23hskehat7428ghsenk0pfew4rqy5v9frnmht7uwrl073q4jvq20z82kh4rksyns540azhndqexqpvhgqr")
                .amount(List.of(new Amount(LOVELACE, ADAConversionUtil.adaToLovelace(10))))
                .build();

        Set<String> byronAddresses = UtxoUtil.getByronAddressOwners(Set.of(utxo1, utxo2, utxo3, utxo4));
        assertThat(byronAddresses).hasSize(2);
        assertThat(byronAddresses).contains("DdzFFzCqrhssWKWXD5n5ScEZtEiQp46Y7bB4KYpm2tyjuoKC2CLtKfCgL2ySfC1goUagjLuuwALeHvWjQZxHHZkbXmb9Fqy4S5eHUZdU",
                "Ae2tdPwUPEZFRbyhz3cpfC2CumGzNkFBN2L42rcUc2yjQpEkxDbkPodpMAi");
    }

    @Test
    public void getNoOfRequiredSigners() {
        Utxo utxo1 = Utxo.builder()
                .txHash("2d8d602c311a07dfff18273b006b927a30f908b215fec0052b5aca97aa7b34b3")
                .outputIndex(0)
                .address("addr_test1wqe44q5knddmv9rldtw2k0vn8d2am4pujtj8mm9u0a0t5esed99ya")
                .amount(List.of(new Amount(LOVELACE, ADAConversionUtil.adaToLovelace(4))))
                .build();
        Utxo utxo2 = Utxo.builder()
                .txHash("2d8d602c311a07dfff18273b006b927a30f908b215fec0052b5aca97aa7b34b3")
                .outputIndex(1)
                .address("addr_test1qpkcp26l47j2fp4crdl9n83zmnw84qrp64sd5w6fwesqt6g8sd9mcktl67rn2t0cth25ryflz59yfxlx636csng7hawstfp400")
                .amount(List.of(new Amount(LOVELACE, ADAConversionUtil.adaToLovelace(10))))
                .build();
        Utxo utxo3 = Utxo.builder()
                .txHash("1d8d602c311a07dfff18273b006b927a30f908b215fec0052b5aca97aa7b34b3")
                .outputIndex(12)
                .address("addr_test1qpkcp26l47j2fp4crdl9n83zmnw84qrp64sd5w6fwesqt6g8sd9mcktl67rn2t0cth25ryflz59yfxlx636csng7hawstfp400")
                .amount(List.of(new Amount(LOVELACE, ADAConversionUtil.adaToLovelace(10))))
                .build();
        Utxo utxo4 = Utxo.builder()
                .txHash("8674de7f24b09e7cd31e807bd2215917f33c13e34b6ec3e610925c338b8545f0")
                .outputIndex(0)
                .address("addr_test1qqxnp3khzm7kcj9t23hskehat7428ghsenk0pfew4rqy5v9frnmht7uwrl073q4jvq20z82kh4rksyns540azhndqexqpvhgqr")
                .amount(List.of(new Amount(LOVELACE, ADAConversionUtil.adaToLovelace(10))))
                .build();
        Utxo utxo5 = Utxo.builder()
                .txHash("2d8d602c311a07dfff18273b006b927a30f908b215fec0052b5aca97aa7b34b3")
                .outputIndex(12)
                .address("Ae2tdPwUPEZFRbyhz3cpfC2CumGzNkFBN2L42rcUc2yjQpEkxDbkPodpMAi")
                .amount(List.of(new Amount(LOVELACE, ADAConversionUtil.adaToLovelace(10))))
                .build();

        int noOfRequiredSigners = UtxoUtil.getNoOfRequiredSigners(Set.of(utxo1, utxo2, utxo3, utxo4, utxo5));
        assertThat(noOfRequiredSigners).isEqualTo(3);
    }

    @Test
    public void getNoOfRequiredSigners_returnsZero_whenOnlyScriptAddress() {
        Utxo utxo1 = Utxo.builder()
                .txHash("2d8d602c311a07dfff18273b006b927a30f908b215fec0052b5aca97aa7b34b3")
                .outputIndex(0)
                .address("addr_test1wqe44q5knddmv9rldtw2k0vn8d2am4pujtj8mm9u0a0t5esed99ya")
                .amount(List.of(new Amount(LOVELACE, ADAConversionUtil.adaToLovelace(4))))
                .build();
        Utxo utxo2 = Utxo.builder()
                .txHash("2d8d602c311a07dfff18273b006b927a30f908b215fec0052b5aca97aa7b34b3")
                .outputIndex(1)
                .address("addr_test1wqe44q5knddmv9rldtw2k0vn8d2am4pujtj8mm9u0a0t5esed99ya")
                .amount(List.of(new Amount(LOVELACE, ADAConversionUtil.adaToLovelace(10))))
                .build();

        int noOfRequiredSigners = UtxoUtil.getNoOfRequiredSigners(Set.of(utxo1, utxo2));
        assertThat(noOfRequiredSigners).isEqualTo(0);
    }

    private String getRandomHexString(int numchars) {
        Random r = new Random();
        StringBuffer sb = new StringBuffer();
        while (sb.length() < numchars) {
            sb.append(Integer.toHexString(r.nextInt()));
        }

        return sb.toString().substring(0, numchars);
    }
}
