"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[928],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,k=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(k,i(i({ref:t},l),{},{components:n})):a.createElement(k,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5268:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={description:"A simple ada transfer example.",sidebar_label:"Simple Ada Transfer",sidebar_position:5},i="Simple Ada Transfer",s={unversionedId:"gettingstarted/simple-transfer",id:"gettingstarted/simple-transfer",title:"Simple Ada Transfer",description:"A simple ada transfer example.",source:"@site/docs/gettingstarted/simple-transfer.md",sourceDirName:"gettingstarted",slug:"/gettingstarted/simple-transfer",permalink:"/docs/gettingstarted/simple-transfer",draft:!1,editUrl:"https://github.com/bloxbean/cardano-client/tree/main/docs/docs/gettingstarted/simple-transfer.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{description:"A simple ada transfer example.",sidebar_label:"Simple Ada Transfer",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Account & Backend Provider Setup",permalink:"/docs/gettingstarted/account-setup"},next:{title:"Simple Token Distribution",permalink:"/docs/gettingstarted/tokens-distribution"}},c={},d=[{value:"Select a Network and Provider",id:"select-a-network-and-provider",level:2},{value:"Create Sender and Receiver accounts",id:"create-sender-and-receiver-accounts",level:2},{value:"Topup sender account with test Ada",id:"topup-sender-account-with-test-ada",level:2},{value:"Create Backend Service",id:"create-backend-service",level:2},{value:"Simple Transfer - Using QuickTx API",id:"simple-transfer---using-quicktx-api",level:2},{value:"Introducing new QuickTx API in Cardano Client Lib ",id:"introducing-new-quicktx-api-in-cardano-client-lib-",level:4},{value:"Simple Transfer - Using Composable Functions",id:"simple-transfer---using-composable-functions",level:2},{value:"Composable function ?",id:"composable-function-",level:3},{value:"Define Expected Outputs",id:"define-expected-outputs",level:3},{value:"Create a transaction message metadata",id:"create-a-transaction-message-metadata",level:3},{value:"Define transaction using TxBuilder and out-of-box composable functions",id:"define-transaction-using-txbuilder-and-out-of-box-composable-functions",level:3},{value:"Build and Sign the transaction",id:"build-and-sign-the-transaction",level:3},{value:"Submit the transaction to Cardano network",id:"submit-the-transaction-to-cardano-network",level:3},{value:"Full Source Code",id:"full-source-code",level:3}],l={toc:d};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"simple-ada-transfer"},"Simple Ada Transfer"),(0,r.kt)("h1",{id:"overview"},"Overview"),(0,r.kt)("p",null,"In this section, we will go through the steps required to do a simple Ada transfer from a\nsender account to two receiver addresses."),(0,r.kt)("h2",{id:"select-a-network-and-provider"},"Select a Network and Provider"),(0,r.kt)("p",null,"First we need to select a network for our transaction. You can choose one of the available public test network."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Preprod")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Preview"))),(0,r.kt)("p",null,"Similarly, choose a backend provider to interact with Cardano blockchain. You can select either Koios or Blockfrost as\nbackend provider."),(0,r.kt)("p",null,"Please check ",(0,r.kt)("a",{parentName:"p",href:"/docs/gettingstarted/dependencies"},"dependencies")," page to find the required dependency for your selected backend provider."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"For ",(0,r.kt)("strong",{parentName:"p"},"Blockfrost")," as backend provider, you need to first create an account on ",(0,r.kt)("a",{parentName:"p",href:"https://blockfrost.io"},"blockfrost.io")," and get\na ",(0,r.kt)("inlineCode",{parentName:"p"},"Project Id")," for the selected network."),(0,r.kt)("p",{parentName:"admonition"},"For ",(0,r.kt)("strong",{parentName:"p"},"Koios")," backend provider, you don't need any registration.")),(0,r.kt)("h2",{id:"create-sender-and-receiver-accounts"},"Create Sender and Receiver accounts"),(0,r.kt)("p",null,"We need three accounts for this example, a sender account and two receiver accounts. As we are going to use one of the test\nnetwork, the following code will generate three testnet addresses."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Account senderAccount = new Account(Networks.testnet()); \nString senderAddress = senderAccount.baseAddress();\nString senderMnemonic = senderAccount.mnemonic();\n\nAccount receiverAccount1 = new Account(Networks.testnet());\nString receiverAddress1 = receiverAccount1.baseAddress();\n\nAccount receiverAccount2 = new Account(Networks.testnet());\nString receiverAddress2 = receiverAccount2.baseAddress();\n\n")),(0,r.kt)("p",null,"If you already have mnemonic for an existing account, you can create a sender account from the mnemonic. For this example,\nwe just need sender account's mnemonic."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String senderMnemonic = "<24 words mnemonic>";\nAccount senderAccount = new Account(Networks.testnet(), senderMnemonic);\n')),(0,r.kt)("p",null,"Similarly, we need two receiver addresses to receive some ada. Unlike other account-based blockchains, Cardano supports multiple outputs\nin a single transaction. So let's define two receiving addresses."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String receiverAddress1 = "addr_test...";\nString receiverAddress2 = "addr_test...";\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Two types of address can be generated, mainnet address or testnet address."),(0,r.kt)("p",{parentName:"admonition"},"To generate a test network address, you can use any of the network constant ",(0,r.kt)("inlineCode",{parentName:"p"},"Networks.testnet()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Networks.preprod()")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"Networks.preview()"),". The generated testnet address can be used on any of the test network.\n",(0,r.kt)("strong",{parentName:"p"},"(The address generation depends on the NetworkId in Network object not protocol magic. These public test networks have same network id (0))")),(0,r.kt)("p",{parentName:"admonition"},"For mainnet address, you need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"Networks.mainnet()"))),(0,r.kt)("h2",{id:"topup-sender-account-with-test-ada"},"Topup sender account with test Ada"),(0,r.kt)("p",null,"Based on your selected network, get some test Ada from one of the below faucet. You need to provide ",(0,r.kt)("inlineCode",{parentName:"p"},"senderAddress"),"\ngenerated in the previous section to get some test Ada."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.cardano.org/cardano-testnet/tools/faucet"},"https://docs.cardano.org/cardano-testnet/tools/faucet")),(0,r.kt)("h2",{id:"create-backend-service"},"Create Backend Service"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For Blockfrost :")),(0,r.kt)("p",null,"Use the correct Blockfrost url for the selected network and project id to create an instance of BackendService."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String bfProjectId = "preprod...";\nBackendService backendService =\n        new BFBackendService(Constants.BLOCKFROST_PREPROD_URL, bfProjectId);\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," You can find Blockfrost urls for the supported networks in ",(0,r.kt)("inlineCode",{parentName:"p"},"com.bloxbean.cardano.client.backend.blockfrost.common.Constants"),"."),(0,r.kt)("p",null,"or,"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For Koios :")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"BackendService backendService = new KoiosBackendService(KOIOS_TESTNET_URL);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," You can find other Koios urls in ",(0,r.kt)("inlineCode",{parentName:"p"},"com.bloxbean.cardano.client.backend.koios.Constants")),(0,r.kt)("h2",{id:"simple-transfer---using-quicktx-api"},"Simple Transfer - Using QuickTx API"),(0,r.kt)("p",null,"Check this ",(0,r.kt)("strong",{parentName:"p"},"post")," to know how to build and submit transaction using QuickTx API. ",(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"introducing-new-quicktx-api-in-cardano-client-lib-"},(0,r.kt)("a",{parentName:"h4",href:"https://satran004.medium.com/introducing-new-quicktx-api-in-cardano-client-lib-0-5-0-beta1-5beb491282ce"},"Introducing new QuickTx API in Cardano Client Lib ")),(0,r.kt)("h2",{id:"simple-transfer---using-composable-functions"},"Simple Transfer - Using Composable Functions"),(0,r.kt)("p",null,"Let's start with a brief introduction about composable functions."),(0,r.kt)("h3",{id:"composable-function-"},"Composable function ?"),(0,r.kt)("p",null,"A set of ",(0,r.kt)("inlineCode",{parentName:"p"},"FunctionalInterface")," which can be used to implement composable functions. These functions\ncan be used to build various different types of transactions. The library provides many useful out-of-box implementations of these functions\nto reduce boilerplate code. You can also write your own function and use it with existing functions."),(0,r.kt)("p",null,"The followings are the main FunctionalInterface"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"TxBuilder"),(0,r.kt)("li",{parentName:"ul"},"TxOutputBuilder"),(0,r.kt)("li",{parentName:"ul"},"TxInputBuilder"),(0,r.kt)("li",{parentName:"ul"},"TxSigner")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"TxBuilder :")," This functional interface helps to transform a transaction object. The ",(0,r.kt)("inlineCode",{parentName:"p"},"apply")," method in this interface takes\na ",(0,r.kt)("inlineCode",{parentName:"p"},"TxBuilderContext")," and a ",(0,r.kt)("inlineCode",{parentName:"p"},"Transaction")," object as input parameters. The role of this function is to transform the input transaction\nobject with additional attributes or update existing attributes."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"TxOutputBuilder :")," This functional interface helps to build a ",(0,r.kt)("inlineCode",{parentName:"p"},"TransactionOutput")," object and add that to the transaction output list.\nThe accept method in this interface takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"TxBuilderContext")," and a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"TransactionOutput"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"TxInputBuilder :")," This functional interface is responsible to build inputs from the expected outputs."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"TxSigner :")," This interface is responsible to provide transaction signing capability."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Now we have everything to build and submit our first transfer transaction.")),(0,r.kt)("h3",{id:"define-expected-outputs"},"Define Expected Outputs"),(0,r.kt)("p",null,"First we need to define the expected output. Let's say we want to send 10 Ada to ",(0,r.kt)("strong",{parentName:"p"},"receiverAddress1")," and 20 Ada to ",(0,r.kt)("strong",{parentName:"p"},"receiverAddress2"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Output output1 = Output.builder()\n                .address(receiverAddress1)\n                .assetName(LOVELACE)\n                .qty(adaToLovelace(10))\n                .build();\n                \nOutput output2 = Output.builder()\n                .address(receiverAddress2)\n                .assetName(LOVELACE)\n                .qty(adaToLovelace(20))\n                .build();                \n")),(0,r.kt)("p",null,"Imports:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import static com.bloxbean.cardano.client.common.ADAConversionUtil.adaToLovelace;\nimport static com.bloxbean.cardano.client.common.CardanoConstants.LOVELACE;\n")),(0,r.kt)("h3",{id:"create-a-transaction-message-metadata"},"Create a transaction message metadata"),(0,r.kt)("p",null,"Let's create a ",(0,r.kt)("a",{parentName:"p",href:"https://cips.cardano.org/cips/cip20/"},"CIP20")," complaint metadata to add some random message to the transaction.\nThis is not mandatory, but we will use this opportunity to see how a metadata can be added to a transaction."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'MessageMetadata metadata = MessageMetadata.create()\n                .add("First transfer transaction");\n')),(0,r.kt)("h3",{id:"define-transaction-using-txbuilder-and-out-of-box-composable-functions"},"Define transaction using TxBuilder and out-of-box composable functions"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Line-1, Line-2 ")," Create ",(0,r.kt)("inlineCode",{parentName:"p"},"TxOutputBuilder")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"output1")," and compose it with another ",(0,r.kt)("inlineCode",{parentName:"p"},"TxOutputBuilder")," generated from ",(0,r.kt)("inlineCode",{parentName:"p"},"output2"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Note:")," Check out various helper methods in ",(0,r.kt)("inlineCode",{parentName:"p"},"com.bloxbean.cardano.client.function.helper.OutputBuilders")," to create ",(0,r.kt)("inlineCode",{parentName:"p"},"TxOutputBuilder"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Line-3,")," Invoke ",(0,r.kt)("inlineCode",{parentName:"p"},"TxOutputBuilder.buildInputs")," with a ",(0,r.kt)("inlineCode",{parentName:"p"},"TxInputBuilder")," function. ",(0,r.kt)("inlineCode",{parentName:"p"},"TxInputBuilder")," function builds required\ninputs based on the expected outputs. "),(0,r.kt)("p",null,"You can select an appropriate composable function from ",(0,r.kt)("inlineCode",{parentName:"p"},"InputBuilders")," helper class to get a ",(0,r.kt)("inlineCode",{parentName:"p"},"TxInputBuilder"),". In the below example,\n",(0,r.kt)("inlineCode",{parentName:"p"},"InputBuilders.createFromSender(String sender, String changeAddress)")," out-of-box composable function is used."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Line-4,")," Use ",(0,r.kt)("inlineCode",{parentName:"p"},"AuxDataProviders.metadataProvider(metadata)")," composable function to add metadata."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Line-5,")," Use ",(0,r.kt)("inlineCode",{parentName:"p"},"BalanceTxBuilders.balanceTx")," composable function to balance the unbalanced transaction.\nIt handles the followings to balance a transaction"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fee calculation"),(0,r.kt)("li",{parentName:"ul"},"Adjust the outputs (if required)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"TxBuilder txBuilder = output1.outputBuilder()\n                .and(output2.outputBuilder())\n                .buildInputs(createFromSender(senderAddress, senderAddress))\n                .andThen(metadataProvider(metadata))\n                .andThen(balanceTx(senderAddress, 1));\n")),(0,r.kt)("h3",{id:"build-and-sign-the-transaction"},"Build and Sign the transaction"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Line-1 & Line-2,")," Create ",(0,r.kt)("inlineCode",{parentName:"p"},"UtxoSupplier")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"ProtocolParamsSupplier")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"BackendService")," instance."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Line-4,")," Initialize ",(0,r.kt)("inlineCode",{parentName:"p"},"TxBuilderContext")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"UtxoSupplier")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ProtocolParamsSupplier"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"TxBuilderContext")," you can customize few behaviors during transaction building."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"For example:")," Select a different ",(0,r.kt)("inlineCode",{parentName:"p"},"UtxoSelectionStrategy")," implementation")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Line-5,")," Create ",(0,r.kt)("inlineCode",{parentName:"p"},"TxSigner")," function using ",(0,r.kt)("inlineCode",{parentName:"p"},"SignerProviders.signerFrom(Account... signers)")," and use it to build\nand sign the transaction."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"UtxoSupplier utxoSupplier = new DefaultUtxoSupplier(backendService.getUtxoService());\nProtocolParamsSupplier protocolParamsSupplier = new DefaultProtocolParamsSupplier(backendService.getEpochService());\n\nTransaction signedTransaction = TxBuilderContext.init(utxoSupplier, protocolParamsSupplier)\n                                    .buildAndSign(txBuilder, signerFrom(senderAccount));\n")),(0,r.kt)("h3",{id:"submit-the-transaction-to-cardano-network"},"Submit the transaction to Cardano network"),(0,r.kt)("p",null,"Now we are ready to submit the transaction to the network. In this example, we are going to submit this transaction through\n",(0,r.kt)("inlineCode",{parentName:"p"},"BackendService"),". Alternatively, you can submit the generated transaction using your own ",(0,r.kt)("inlineCode",{parentName:"p"},"TransactionProcessor")," implementation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Result<String> result = backendService.getTransactionService().submitTransaction(signedTransaction.serialize());\nSystem.out.println(result);\n")),(0,r.kt)("p",null,"If successful, ",(0,r.kt)("inlineCode",{parentName:"p"},"result.isSuccessful()")," will return true."),(0,r.kt)("h3",{id:"full-source-code"},"Full Source Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'import com.bloxbean.cardano.client.account.Account;\nimport com.bloxbean.cardano.client.api.ProtocolParamsSupplier;\nimport com.bloxbean.cardano.client.api.UtxoSupplier;\nimport com.bloxbean.cardano.client.api.model.Result;\nimport com.bloxbean.cardano.client.backend.api.BackendService;\nimport com.bloxbean.cardano.client.backend.api.DefaultProtocolParamsSupplier;\nimport com.bloxbean.cardano.client.backend.api.DefaultUtxoSupplier;\nimport com.bloxbean.cardano.client.backend.blockfrost.common.Constants;\nimport com.bloxbean.cardano.client.backend.blockfrost.service.BFBackendService;\nimport com.bloxbean.cardano.client.cip.cip20.MessageMetadata;\nimport com.bloxbean.cardano.client.common.model.Networks;\nimport com.bloxbean.cardano.client.function.Output;\nimport com.bloxbean.cardano.client.function.TxBuilder;\nimport com.bloxbean.cardano.client.function.TxBuilderContext;\nimport com.bloxbean.cardano.client.function.helper.InputBuilders;\nimport com.bloxbean.cardano.client.transaction.spec.Transaction;\n\nimport static com.bloxbean.cardano.client.common.ADAConversionUtil.adaToLovelace;\nimport static com.bloxbean.cardano.client.common.CardanoConstants.LOVELACE;\nimport static com.bloxbean.cardano.client.function.helper.AuxDataProviders.metadataProvider;\nimport static com.bloxbean.cardano.client.function.helper.BalanceTxBuilders.balanceTx;\nimport static com.bloxbean.cardano.client.function.helper.InputBuilders.createFromSender;\nimport static com.bloxbean.cardano.client.function.helper.SignerProviders.signerFrom;\n\npublic class SimpleTransfer {\n\n    public void transfer() throws Exception {\n        //Sender account\n        String senderMnemonic = "<24 words mnemonic>";\n        Account senderAccount = new Account(Networks.testnet(), senderMnemonic);\n        String senderAddress = senderAccount.baseAddress();\n\n        //Addresses to receive ada\n        String receiverAddress1 = "addr_test1qpjs693nk7makhcax3k7h0hkjyye2adwv3e300dkfwpqj8k2le4j5lg6gd773gdvs7jcnwdxvtztmxawwcdmvm0h870sardwde";\n        String receiverAddress2 = "addr_test1qzvy33rr24huuqv46ajex99hrcl0dauqcch7meznf4mdyd4sqwzjy5gaynruuwtdmwmdlnasa8t2g2t0fqmf8rhq3e6svxzum4";\n\n        // For Blockfrost\n        String bf_projectId = "<Blockfrost Project Id>";\n        BackendService backendService =\n                new BFBackendService(Constants.BLOCKFROST_PREVIEW_URL, bf_projectId);\n\n        // For Koios\n        // BackendService backendService = new KoiosBackendService(KOIOS_TESTNET_URL);\n\n        // Define expected Outputs\n        Output output1 = Output.builder()\n                .address(receiverAddress1)\n                .assetName(LOVELACE)\n                .qty(adaToLovelace(10))\n                .build();\n\n        Output output2 = Output.builder()\n                .address(receiverAddress2)\n                .assetName(LOVELACE)\n                .qty(adaToLovelace(20))\n                .build();\n\n        // Create a CIP20 message metadata\n        MessageMetadata metadata = MessageMetadata.create()\n                .add("First transfer transaction");\n\n        // Define TxBuilder\n        TxBuilder txBuilder = output1.outputBuilder()\n                .and(output2.outputBuilder())\n                .buildInputs(createFromSender(senderAddress, senderAddress))\n                .andThen(metadataProvider(metadata))\n                .andThen(balanceTx(senderAddress, 1));\n        \n        UtxoSupplier utxoSupplier = new DefaultUtxoSupplier(backendService.getUtxoService());\n        ProtocolParamsSupplier protocolParamsSupplier = new DefaultProtocolParamsSupplier(backendService.getEpochService());\n\n        //Build and sign the transaction\n        Transaction signedTransaction = TxBuilderContext.init(utxoSupplier, protocolParamsSupplier)\n                .buildAndSign(txBuilder, signerFrom(senderAccount));\n\n        //Submit the transaction\n        Result<String> result = backendService.getTransactionService().submitTransaction(signedTransaction.serialize());\n        System.out.println(result);\n    }\n\n    public static void main(String[] args) throws Exception {\n        new SimpleTransfer().transfer();\n    }\n}\n\n')))}p.isMDXComponent=!0}}]);