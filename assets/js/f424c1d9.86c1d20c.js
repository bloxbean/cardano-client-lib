"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[469],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),l=d(n),m=a,v=l["".concat(s,".").concat(m)]||l[m]||u[m]||c;return n?r.createElement(v,i(i({ref:t},p),{},{components:n})):r.createElement(v,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,i=new Array(c);i[0]=l;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var d=2;d<c;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},6545:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>d});var r=n(7462),a=(n(7294),n(3905));const c={description:"Key apis of Cardano Client Lib",sidebar_label:"Key Apis",sidebar_position:8},i="Key Apis",o={unversionedId:"gettingstarted/key-apis",id:"gettingstarted/key-apis",title:"Key Apis",description:"Key apis of Cardano Client Lib",source:"@site/docs/gettingstarted/key-apis.md",sourceDirName:"gettingstarted",slug:"/gettingstarted/key-apis",permalink:"/docs/gettingstarted/key-apis",draft:!1,editUrl:"https://github.com/bloxbean/cardano-client/tree/main/docs/docs/gettingstarted/key-apis.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{description:"Key apis of Cardano Client Lib",sidebar_label:"Key Apis",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Multi-sig transfer with Native script",permalink:"/docs/gettingstarted/multisig-quickstart"},next:{title:"Build",permalink:"/docs/gettingstarted/build"}},s={},d=[{value:"Account API Usage",id:"account-api-usage",level:2},{value:"Create a New Account",id:"create-a-new-account",level:3},{value:"Get base address, enterprise address, mnemonic",id:"get-base-address-enterprise-address-mnemonic",level:3},{value:"Get Account from Mnemonic",id:"get-account-from-mnemonic",level:3},{value:"Create Blockfrost Backend Service and get other services",id:"create-blockfrost-backend-service-and-get-other-services",level:2},{value:"Simple ADA Payment (Composable functions)",id:"simple-ada-payment-composable-functions",level:2},{value:"ScriptHash",id:"scripthash",level:2},{value:"Metadata",id:"metadata",level:2}],p={toc:d};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"key-apis"},"Key Apis"),(0,a.kt)("h2",{id:"account-api-usage"},"Account API Usage"),(0,a.kt)("h3",{id:"create-a-new-account"},"Create a New Account"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Account account = new Account();   //Create a Mainnet account\n\nAccount account = new Account(Networks.mainnet());   //Create a Mainnet account\n\nAccount account = new Account(Networks.testnet());  //Create a Testnet account\n")),(0,a.kt)("h3",{id:"get-base-address-enterprise-address-mnemonic"},"Get base address, enterprise address, mnemonic"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"String baseAddress = account.baseAddress();  //Base address at index=0\n\nString enterpriseAddress = account.account.enterpriseAddress();  //Enterprise address at index = 0\n\nString mnemonic = account.mnemonic();  //Get Mnemonic\n")),(0,a.kt)("h3",{id:"get-account-from-mnemonic"},"Get Account from Mnemonic"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'String mnemonic = "...";\nAccount account = new Account(mnemonic);  //Create a Mainnet account from Mnemonic\n\nAccount account = new Account(Networks.testnet(), mnemonic); //Create a Testnet account from Mnemonic\n')),(0,a.kt)("h2",{id:"create-blockfrost-backend-service-and-get-other-services"},"Create Blockfrost Backend Service and get other services"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"BackendService backendService =\n                new BFBackendService(Constants.BLOCKFROST_TESTNET_URL, <BF_PROJECT_ID>);               \n\nFeeCalculationService feeCalculationService = backendService.getFeeCalculationService();\nTransactionHelperService transactionHelperService = backendService.getTransactionHelperService();\nTransactionService transactionService = backendService.getTransactionService();\nBlockService blockService = backendService.getBlockService();\nAssetService assetService = backendService.getAssetService();\nUtxoService utxoService = backendService.getUtxoService();\nMetadataService metadataService = backendService.getMetadataService();\nEpochService epochService = backendService.getEpochService();\nAddressService addressService = backendService.getAddressService();\n")),(0,a.kt)("h2",{id:"simple-ada-payment-composable-functions"},"Simple ADA Payment (Composable functions)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'//Define expected outputs\nOutput output1 = Output.builder()\n        .address(receiverAddress1)\n        .assetName(LOVELACE)\n        .qty(adaToLovelace(10))\n        .build();\n\n Output output2 = Output.builder()\n        .address(receiverAddress2)\n        .assetName(LOVELACE)\n        .qty(adaToLovelace(20))\n        .build();\n\n // Create a CIP20 message metadata\n MessageMetadata metadata = MessageMetadata.create()\n                    .add("First transfer transaction");\n\n // Define TxBuilder\n TxBuilder txBuilder = output1.outputBuilder()\n        .and(output2.outputBuilder())\n        .buildInputs(createFromSender(senderAddress, senderAddress))\n        .andThen(metadataProvider(metadata))\n        .andThen(balanceTx(senderAddress, 1));\n\n UtxoSupplier utxoSupplier = new DefaultUtxoSupplier(backendService.getUtxoService());\n ProtocolParamsSupplier protocolParamsSupplier = new DefaultProtocolParamsSupplier(backendService.getEpochService());\n\n //Build and sign the transaction\n Transaction signedTransaction = TxBuilderContext.init(utxoSupplier, protocolParamsSupplier)\n                            .buildAndSign(txBuilder, signerFrom(senderAccount));\n //Submit the transaction\n Result<String> result = backendService.getTransactionService().submitTransaction(signedTransaction.serialize());\n')),(0,a.kt)("h2",{id:"scripthash"},"ScriptHash"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Example: 1\n\nScriptPubkey scriptPubkey = new ScriptPubkey("ad7a7b87959173fc9eac9a85891cc93892f800dd45c0544128228884")\nString policyId = scriptPubkey.getPolicyId();\n\nExample: 2\n\nScriptPubkey scriptPubkey1 = ...;\nSecretKey sk1 = ...;\n\nScriptPubkey scriptPubkey2 = ...;\nSecretKey sk2 = ...;\n\nScriptPubkey scriptPubkey3 = ...;\nSecretKey sk3 = ...;\n\nScriptAtLeast scriptAtLeast = new ScriptAtLeast(2)\n                .addScript(scriptPubkey1)\n                .addScript(scriptPubkey2)\n                .addScript(scriptPubkey3);\n\nString policyId = scriptAtLeast.getPolicyId();\n\n')),(0,a.kt)("h2",{id:"metadata"},"Metadata"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'CBORMetadataMap productDetailsMap\n                = new CBORMetadataMap()\n                    .put("code", "PROD-800")\n                    .put("slno", "SL20000039484");\n\nCBORMetadataList tagList\n                = new CBORMetadataList()\n                    .add("laptop")\n                    .add("computer");\n\nMetadata metadata = new CBORMetadata()\n                    .put(new BigInteger("670001"), productDetailsMap)\n                    .put(new BigInteger("670002"), tagList);\n')))}u.isMDXComponent=!0}}]);