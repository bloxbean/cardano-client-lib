"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[883],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(t),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(h,i(i({ref:n},p),{},{components:t})):r.createElement(h,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2101:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={description:"Governance API Usage",sidebar_label:"Governance Api",sidebar_position:1},i="Governance Api (Preview)",c={unversionedId:"apis/governance-api",id:"apis/governance-api",title:"Governance Api (Preview)",description:"Governance API Usage",source:"@site/docs/apis/governance-api.md",sourceDirName:"apis",slug:"/apis/governance-api",permalink:"/docs/apis/governance-api",draft:!1,editUrl:"https://github.com/bloxbean/cardano-client/tree/main/docs/docs/apis/governance-api.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Governance API Usage",sidebar_label:"Governance Api",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Apis",permalink:"/docs/category/apis"},next:{title:"CIP68 Datum Metadata Api",permalink:"/docs/apis/cip68-api"}},s={},l=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"1. DRep API",id:"1-drep-api",level:2},{value:"Register DRep",id:"register-drep",level:3},{value:"Deregister DRep",id:"deregister-drep",level:3},{value:"Update DRep",id:"update-drep",level:3},{value:"2. Gov Action Create API",id:"2-gov-action-create-api",level:2},{value:"Create a Info Proposal",id:"create-a-info-proposal",level:3},{value:"Create new Constitution Proposal",id:"create-new-constitution-proposal",level:3},{value:"Creae a NoConfidence Proposal",id:"creae-a-noconfidence-proposal",level:3},{value:"Create a ParameterChange Proposal",id:"create-a-parameterchange-proposal",level:3},{value:"Create a HardForkInitiation Proposal",id:"create-a-hardforkinitiation-proposal",level:3},{value:"Create a TreasuryWithdrawal Proposal",id:"create-a-treasurywithdrawal-proposal",level:3},{value:"Create a UpdateCommittee Proposal",id:"create-a-updatecommittee-proposal",level:3},{value:"3. Vote API",id:"3-vote-api",level:2},{value:"4. Vote Delegation API",id:"4-vote-delegation-api",level:2}],p={toc:l};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"governance-api-preview"},"Governance Api (Preview)"),(0,a.kt)("p",null,"QuickTx Api now supports governance related transactions. It's supported through the existing ",(0,a.kt)("inlineCode",{parentName:"p"},"Tx")," class."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Version:")," 0.5.1 and later"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," This is a preview version and the API is subject to change."),(0,a.kt)("p",null,"Check out QuickTx Governance API ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bloxbean/cardano-client-lib/blob/master/quicktx/src/it/java/com/bloxbean/cardano/client/quicktx/GovernanceTxIT.java"},(0,a.kt)("strong",{parentName:"a"},"integration tests"))," for more examples."),(0,a.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,a.kt)("p",null,"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"QuickTxBuilder")," instance and required accounts."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'QuickTxBuilder quickTxBuilder = new QuickTxBuilder(backendService);\nAccount accout = new Account("your mnemonic words");\nString address = account.baseAddress();\n')),(0,a.kt)("h2",{id:"1-drep-api"},"1. DRep API"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," To find the DRepId of an account, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"drepId()")," method of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Account")," class."),(0,a.kt)("h3",{id:"register-drep"},"Register DRep"),(0,a.kt)("p",null,"The following example shows how to register an account as a DRep."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'var anchor = new Anchor("<anchor_url>", <anchor_datahash>);\n\nTx drepRegTx = new Tx()\n        .registerDRep(account, anchor)\n        .from(address);\n\nResult<String> result = quickTxBuilder.compose(drepRegTx)\n        .withSigner(SignerProviders.signerFrom(account))\n        .withSigner(SignerProviders.signerFrom(account.drepHdKeyPair()))\n        .completeAndWait(s -> System.out.println(s));\n')),(0,a.kt)("h3",{id:"deregister-drep"},"Deregister DRep"),(0,a.kt)("p",null,"To deregister an account as a DRep, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"unregisterDRep()")," method of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Tx")," class. The transaction needs to be\nsigned by the account for tx fee payment and by the DRep Key of the account.,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Tx tx = new Tx()\n        .unregisterDRep(account.drepCredential())\n        .from(address);\n\nResult<String> result = quickTxBuilder.compose(tx)\n        .withSigner(SignerProviders.drepKeySignerFrom(account))\n        .withSigner(SignerProviders.signerFrom(account))\n        .completeAndWait(s -> System.out.println(s));\n")),(0,a.kt)("h3",{id:"update-drep"},"Update DRep"),(0,a.kt)("p",null,"To update the DRep information, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"updateDRep()")," method of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Tx")," class. The transaction needs to be signed\nby the account for tx fee payment and by the DRep Key of the account."),(0,a.kt)("p",null,"In the following example, the DRep information is updated to remove the anchor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"}," Tx drepRegTx = new Tx()\n        .updateDRep(account.drepCredential())\n        .from(senderAddr);\n\nResult<String> result = quickTxBuilder.compose(drepRegTx)\n        .withSigner(SignerProviders.drepKeySignerFrom(account))\n        .withSigner(SignerProviders.signerFrom(account))\n        .completeAndWait(s -> System.out.println(s));\n")),(0,a.kt)("p",null,"To update the DRep information with a new anchor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'var newAnchor = new Anchor("<anchor_url>", "<anchor_datahash>");\n\nTx drepRegTx = new Tx()\n        .updateDRep(account.drepCredential(), newAnchor)\n        .from(senderAddr);\n\nResult<String> result = quickTxBuilder.compose(drepRegTx)\n        .withSigner(SignerProviders.drepKeySignerFrom(account))\n        .withSigner(SignerProviders.signerFrom(account))\n        .completeAndWait(s -> System.out.println(s));\n')),(0,a.kt)("h2",{id:"2-gov-action-create-api"},"2. Gov Action Create API"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Tx")," class, you can create a governance proposal such as "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"InfoAction"),(0,a.kt)("li",{parentName:"ul"},"NewConstitution"),(0,a.kt)("li",{parentName:"ul"},"NoConfidence"),(0,a.kt)("li",{parentName:"ul"},"ParameterChangeAction"),(0,a.kt)("li",{parentName:"ul"},"HardForkInitiationAction"),(0,a.kt)("li",{parentName:"ul"},"TreasuryWithdrawalsAction"),(0,a.kt)("li",{parentName:"ul"},"UpdateCommittee")),(0,a.kt)("p",null,"Use the createProposal() method of the Tx class to create a proposal. In addition to the GovAction instance, you also need to\nspecify the amount of ADA to be deposited for the proposal creation and the return address (stake address) to which the\ndeposit will be returned."),(0,a.kt)("p",null,"The transaction needs to be signed by the account for tx fee & deposit and by the DRep credential of the account."),(0,a.kt)("p",null,"The required deposit amount for proposal creation is a protocol parameter (govActionDeposit) and it's currently set to 1000 ADA for Sanchonet."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," In future versions, the deposit amount will be automatically fetched from the protocol parameters."),(0,a.kt)("h3",{id:"create-a-info-proposal"},"Create a Info Proposal"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"InfoAction")," to create a proposal with anchor for proposal information."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'var govAction = new InfoAction();\nvar anchor = new Anchor("<anchor_url>", <anchor_datahash>);\n\nTx tx = new Tx()\n        .createProposal(govAction, adaToLovelace(1000), account.stakeAddress(), anchor)\n        .from(address);\n\nResult<String> result = quickTxBuilder.compose(tx)\n        .withSigner(SignerProviders.drepKeySignerFrom(account))\n        .withSigner(SignerProviders.signerFrom(account))\n        .completeAndWait(s -> System.out.println(s));\n')),(0,a.kt)("h3",{id:"create-new-constitution-proposal"},"Create new Constitution Proposal"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"NewConstitution")," to create a proposal with anchor for new constitution."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'var anchor = new Anchor("<anchor_url>", <anchor_datahash>);\n\nvar govAction = new NewConstitution();\ngovAction.setPrevGovActionId(new GovActionId("<prevGovActionTxHash>", prevGovActionIndex));\ngovAction.setConstitution(Constitution.builder()\n        .anchor(anchor)\n        .build());\n\nTx tx = new Tx()\n        .createProposal(govAction, adaToLovelace(1000), account.stakeAddress(), anchor)\n        .from(address);\n\nResult<String> result = quickTxBuilder.compose(tx)\n        .withSigner(SignerProviders.drepKeySignerFrom(account))\n        .withSigner(SignerProviders.signerFrom(account))\n        .completeAndWait(s -> System.out.println(s));\n')),(0,a.kt)("h3",{id:"creae-a-noconfidence-proposal"},"Creae a NoConfidence Proposal"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"NoConfidence")," to create a proposal for no confidence."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'var noConfidence = new NoConfidence();\nnoConfidence.setPrevGovActionId(new GovActionId("<prevGovActionTxHash>", prevGovActionIndex));\nvar anchor = new Anchor("<anchor_url>", <anchor_datahash>);\n\nTx tx = new Tx()\n        .createProposal(noConfidence, adaToLovelace(1000), account.stakeAddress(), anchor)\n        .from(address);\n\nResult<String> result = quickTxBuilder.compose(tx)\n        .withSigner(SignerProviders.drepKeySignerFrom(account))\n        .withSigner(SignerProviders.signerFrom(account))\n        .completeAndWait(s -> System.out.println(s));\n')),(0,a.kt)("h3",{id:"create-a-parameterchange-proposal"},"Create a ParameterChange Proposal"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"ParameterChangeAction")," to create a proposal for parameter change."),(0,a.kt)("p",null,"In the below example, the minPoolCost parameter is updated to 100 ADA."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'var parameterChange = new ParameterChangeAction();\nparameterChange.setPrevGovActionId(new GovActionId("529736be1fac33431667f2b66231b7b66d4c7a3975319ddac7cfb17dcb5c4145", 0));\nparameterChange.setProtocolParamUpdate(ProtocolParamUpdate.builder()\n                .minPoolCost(adaToLovelace(100))\n                .build());\n\nvar anchor = new Anchor("<anchor_url>", <anchor_datahash>);\n        \nTx tx = new Tx()\n        .createProposal(parameterChange, adaToLovelace(1000), account.stakeAddress(), anchor)\n        .from(address);\n\nResult<String> result = quickTxBuilder.compose(tx)\n        .withSigner(SignerProviders.drepKeySignerFrom(account))\n        .withSigner(SignerProviders.signerFrom(account))\n        .completeAndWait(s -> System.out.println(s));\n')),(0,a.kt)("h3",{id:"create-a-hardforkinitiation-proposal"},"Create a HardForkInitiation Proposal"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"HardForkInitiationAction")," to create a proposal for hard fork initiation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'var hardforkInitiation = new HardForkInitiationAction();\nhardforkInitiation.setPrevGovActionId(new GovActionId("416f7f01c548a85546aa5bbd155b34bb2802df68e08db4e843ef6da764cd8f7e", 0));\nhardforkInitiation.setProtocolVersion(new ProtocolVersion(9, 0));\n\nvar anchor = new Anchor("<anchor_url>", <anchor_datahash>);\n\nTx tx = new Tx()\n        .createProposal(hardforkInitiation, adaToLovelace(1000), account.stakeAddress(), anchor)\n        .from(address);\n\nResult<String> result = quickTxBuilder.compose(tx)\n        .withSigner(SignerProviders.drepKeySignerFrom(account))\n        .withSigner(SignerProviders.signerFrom(account))\n        .completeAndWait(s -> System.out.println(s));\n')),(0,a.kt)("h3",{id:"create-a-treasurywithdrawal-proposal"},"Create a TreasuryWithdrawal Proposal"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"TreasuryWithdrawalsAction")," to create a proposal for treasury withdrawal."),(0,a.kt)("p",null,"In the example below, a proposal is created to withdraw 20 ADA from the treasury and send it to the specified stake address."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'var treasuryWithdrawalsAction = new TreasuryWithdrawalsAction();\ntreasuryWithdrawalsAction.addWithdrawal(new Withdrawal("stake_test1ur6l9f5l9jw44kl2nf6nm5kca3nwqqkccwynnjm0h2cv60ccngdwa", adaToLovelace(20)));\n\nvar anchor = new Anchor("<anchor_url>", <anchor_datahash>);\n\nTx tx = new Tx()\n        .createProposal(treasuryWithdrawalsAction, adaToLovelace(1000), account.stakeAddress(), anchor)\n        .from(address);\n\nResult<String> result = quickTxBuilder.compose(tx)\n        .withSigner(SignerProviders.drepKeySignerFrom(account))\n        .withSigner(SignerProviders.signerFrom(account))\n        .completeAndWait(s -> System.out.println(s));\n')),(0,a.kt)("h3",{id:"create-a-updatecommittee-proposal"},"Create a UpdateCommittee Proposal"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"UpdateCommittee")," to create a proposal for updating the committee information."),(0,a.kt)("p",null,"In the example below, a proposal is created to update the quorum threshold to 1/3."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'var updateCommittee = new UpdateCommittee();\nupdateCommittee.setPrevGovActionId(new GovActionId("b3ce0371310a07a797657d19453d953bb352b6841c2f5c5e0bd2557189ef5c3a", 0));\nupdateCommittee.setQuorumThreshold(new UnitInterval(BigInteger.valueOf(1), BigInteger.valueOf(3)));\n\nvar anchor = new Anchor("<anchor_url>", <anchor_datahash>);\n\nTx tx = new Tx()\n        .createProposal(updateCommittee, adaToLovelace(1000), account.stakeAddress(), anchor)\n        .from(address);\n\nResult<String> result = quickTxBuilder.compose(tx)\n        .withSigner(SignerProviders.drepKeySignerFrom(account))\n        .withSigner(SignerProviders.signerFrom(account))\n        .completeAndWait(s -> System.out.println(s));\n')),(0,a.kt)("h2",{id:"3-vote-api"},"3. Vote API"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Tx")," class to vote on a governance proposal. "),(0,a.kt)("p",null,"In addition to the GovActionId, you also need to specify Vote(Yes, No, Abstain), voter and an anchor for the vote information (optional)."),(0,a.kt)("p",null,"The transaction needs to be signed by the account for tx fee payment and by the DRep credential of the account."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'var voter = new Voter(VoterType.DREP_KEY_HASH, account.drepCredential());\nvar govActionId = new GovActionId("5655fbb4ceafd34296fe58f6e3d28b8ff663a89e84aa0edd77bd02fe379cef4c", 0); //some gov action id\n\nTx tx = new Tx()\n        .createVote(voter, govActionId, Vote.NO)\n        .from(address);\n\nResult<String> result = quickTxBuilder.compose(tx)\n        .withSigner(SignerProviders.drepKeySignerFrom(account))\n        .withSigner(SignerProviders.signerFrom(account))\n        .completeAndWait(s -> System.out.println(s));\n')),(0,a.kt)("h2",{id:"4-vote-delegation-api"},"4. Vote Delegation API"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Tx")," class to delegate voting rights to a DRep."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"DRep drep = DRepId.toDrep(drepId, DRepType.ADDR_KEYHASH);\n\nTx tx = new Tx()\n        .delegateVotingPowerTo(account, drep)\n        .from(address);\n\nResult<String> result = quickTxBuilder.compose(tx)\n        .withSigner(SignerProviders.stakeKeySignerFrom(account))\n        .withSigner(SignerProviders.signerFrom(account))\n        .completeAndWait(s -> System.out.println(s));\n")))}d.isMDXComponent=!0}}]);