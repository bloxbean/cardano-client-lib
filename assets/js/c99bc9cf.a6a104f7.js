"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[849],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(a),m=r,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return a?n.createElement(g,i(i({ref:t},p),{},{components:a})):n.createElement(g,i({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3358:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const o={description:"Scalus Integration Apis",sidebar_label:"Scalus Integration",sidebar_position:2},i="Scalus Integration",l={unversionedId:"integrations/scalus-integration-api",id:"integrations/scalus-integration-api",title:"Scalus Integration",description:"Scalus Integration Apis",source:"@site/docs/integrations/scalus-integration-api.md",sourceDirName:"integrations",slug:"/integrations/scalus-integration-api",permalink:"/docs/integrations/scalus-integration-api",draft:!1,editUrl:"https://github.com/bloxbean/cardano-client/tree/main/docs/docs/integrations/scalus-integration-api.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Scalus Integration Apis",sidebar_label:"Scalus Integration",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Aiken Integration",permalink:"/docs/integrations/aiken-integration-api"},next:{title:"Guides",permalink:"/docs/category/guides"}},c={},s=[{value:"Dependencies",id:"dependencies",level:2},{value:"Maven (<code>pom.xml</code>)",id:"maven-pomxml",level:3},{value:"Gradle (<code>build.gradle</code>)",id:"gradle-buildgradle",level:3},{value:"Script Cost Evaluation",id:"script-cost-evaluation",level:2},{value:"Compile Parameterized Contract",id:"compile-parameterized-contract",level:2},{value:"Apply Parameters to Double Encoded CBOR Hex",id:"apply-parameters-to-double-encoded-cbor-hex",level:3}],p={toc:s};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"scalus-integration"},"Scalus Integration"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nau/scalus"},"Scalus")," compiles a subset of Scala code to Plutus Core, the language of Cardano smart contracts.\nScalus gives full control over the generated Plutus Core code. Write efficient and compact smart contracts and squeeze the most out of the Cardano blockchain."),(0,r.kt)("p",null,"It provides native integration with the Cardano Client Library. By using Scalus's Bloxbean integration, you can perform\nscript cost evaluation and compile parameterized contracts."),(0,r.kt)("p",null,"Since Scalus is written in Scala, a JVM language, it can be used on all supported platforms, including Linux arm64, which is not currently possible with Aiken Java Binding."),(0,r.kt)("h2",{id:"dependencies"},"Dependencies"),(0,r.kt)("h3",{id:"maven-pomxml"},"Maven (",(0,r.kt)("inlineCode",{parentName:"h3"},"pom.xml"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>org.scalus</groupId>\n    <artifactId>scalus-bloxbean-cardano-client-lib_3</artifactId>\n    <version>0.7.2</version>\n</dependency>\n")),(0,r.kt)("h3",{id:"gradle-buildgradle"},"Gradle (",(0,r.kt)("inlineCode",{parentName:"h3"},"build.gradle"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},"implementation 'org.scalus:scalus-bloxbean-cardano-client-lib_3:0.7.2'\n")),(0,r.kt)("h2",{id:"script-cost-evaluation"},"Script Cost Evaluation"),(0,r.kt)("p",null,"Scalus Bloxbean integration provides ",(0,r.kt)("inlineCode",{parentName:"p"},"ScalaTransactionEvaluator"),", which can be used to evaluate the cost of a script.\nSince it implements the CCL's ",(0,r.kt)("inlineCode",{parentName:"p"},"TransactionEvaluator")," interface, you can use it directly with the QuickTx builder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"var signedTx = quickTxBuilder\n  .compose(scriptTx)\n  .withTxEvaluator(ScalusTransactionEvaluator(protocolParams, utxoSupplier))\n  // build your transaction\n  .buildAndSign();\n")),(0,r.kt)("h2",{id:"compile-parameterized-contract"},"Compile Parameterized Contract"),(0,r.kt)("p",null,"Similar to Aiken Java Binding, Scalus Bloxbean integration provides api which can be used to\ncompile a parameterized script. The parameters required for the script are passed as a ",(0,r.kt)("inlineCode",{parentName:"p"},"ListPlutusData")," object."),(0,r.kt)("p",null,"You can create a utility class to apply these parameters to the compiled code from a Plutus Blueprint JSON file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import com.bloxbean.cardano.client.plutus.spec.ListPlutusData;\nimport scalus.uplc.Program;\nimport scalus.uplc.Term;\nimport scalus.uplc.Constant;\n\npublic class ScalusUtils {\n    public static String applyParamToScript(ListPlutusData params, String compiledCode) {\n        var program = Program.fromCborHex(compiledCode);\n        for (var p : params.getPlutusDataList()) {\n            var scalusData = Interop.toScalusData(p);\n            var term = Term.Const.apply(Constant.Data.apply(scalusData));\n            program = program.applyArg(term);\n        }\n        return HexUtil.encodeHexString(program.cborEncoded());\n    }\n}\n")),(0,r.kt)("h3",{id:"apply-parameters-to-double-encoded-cbor-hex"},"Apply Parameters to Double Encoded CBOR Hex"),(0,r.kt)("p",null,"If you have a ",(0,r.kt)("strong",{parentName:"p"},"double-encoded CBOR hex")," string of the compiled code, you can use the following method to apply the parameters.\nThe utility method below will apply the parameters to the double-encoded CBOR hex string and return the updated double-encoded CBOR hex string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import com.bloxbean.cardano.client.plutus.spec.ListPlutusData;\nimport scalus.uplc.Program;\nimport scalus.uplc.Term;\nimport scalus.uplc.Constant;\n\npublic class ScalusUtils {\n    public static String applyParamToScript(ListPlutusData params, String compiledCode) {\n        var program = Program.fromDoubleCborHex(compiledCode);\n        for (var p : params.getPlutusDataList()) {\n            var scalusData = Interop.toScalusData(p);\n            var term = Term.Const.apply(Constant.Data.apply(scalusData));\n            program = program.applyArg(term);\n        }\n        return program.doubleCborHex();\n    }\n}\n")))}u.isMDXComponent=!0}}]);