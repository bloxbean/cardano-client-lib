"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[429],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,f=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(f,o(o({ref:t},l),{},{components:n})):a.createElement(f,o({ref:t},l))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5783:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={description:"CIP68 Datum Metadata Api",sidebar_label:"CIP68 Datum Metadata Api",sidebar_position:2},o="CIP68 Datum Metadata Api",s={unversionedId:"apis/cip68-api",id:"apis/cip68-api",title:"CIP68 Datum Metadata Api",description:"CIP68 Datum Metadata Api",source:"@site/docs/apis/cip68-api.md",sourceDirName:"apis",slug:"/apis/cip68-api",permalink:"/docs/apis/cip68-api",draft:!1,editUrl:"https://github.com/bloxbean/cardano-client/tree/main/docs/docs/apis/cip68-api.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"CIP68 Datum Metadata Api",sidebar_label:"CIP68 Datum Metadata Api",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Governance Api",permalink:"/docs/apis/governance-api"},next:{title:"Guides",permalink:"/docs/category/guides"}},p={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"CIP68 Apis",id:"cip68-apis",level:2},{value:"CIP68 NFT Datum Metadata Api",id:"cip68-nft-datum-metadata-api",level:3},{value:"CIP68 FT Datum Metadata Api",id:"cip68-ft-datum-metadata-api",level:3},{value:"CIP68 RFT Datum Metadata Api",id:"cip68-rft-datum-metadata-api",level:3}],l={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cip68-datum-metadata-api"},"CIP68 Datum Metadata Api"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Version:")," ",(0,r.kt)("strong",{parentName:"p"},"0.5.1")," and later"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"CIP68 defines a metadata standard for native assets making use of output datums not only for NFTs but any asset class.\nCardano Client Lib provides a simple API to build CIP68 compatible datum metadata and simplify the process of building transactions\nto mint CIP68 compatible native tokens."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/cardano-foundation/CIPs/tree/master/CIP-0068"},"CIP68 - Datum Metadata Standard")),(0,r.kt)("h2",{id:"dependencies"},"Dependencies"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Group Id   :")," com.bloxbean.cardano"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Artifact Id:")," cardano-client-cip68")),(0,r.kt)("h2",{id:"cip68-apis"},"CIP68 Apis"),(0,r.kt)("p",null,"Cardano Client Lib provides the following 3 main APIs to build CIP68 compatible datum metadata for different types of assets."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"CIP68NFT")," : For NFTs (222 NFT Standard)"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"CIP68FT"),"  : For Fungible Tokens (333 Fungible Token Standard)"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"CIP68RFT")," : For Rich (444 Rich-FT Standard)")),(0,r.kt)("p",null,"Apart from the above APIs, there is an API ",(0,r.kt)("strong",{parentName:"p"},"CIP68ReferenceToken")," which is used for reference tokens. A reference token\ninstance can be created from the above 3 APIs."),(0,r.kt)("h3",{id:"cip68-nft-datum-metadata-api"},"CIP68 NFT Datum Metadata Api"),(0,r.kt)("p",null,"The following example shows how to create a CIP68NFT instance and use it to mint a CIP68 NFT."),(0,r.kt)("p",null,"In ",(0,r.kt)("strong",{parentName:"p"},"Line 8"),", create a CIP68NFT instance by calling the static method ",(0,r.kt)("inlineCode",{parentName:"p"},"CIP68NFT.create()"),". Then set the name, description,\nimage and other properties of the NFT according to the CIP68 standard. "),(0,r.kt)("p",null,"In ",(0,r.kt)("strong",{parentName:"p"},"Line 19"),", get the corresponding CIP68ReferenceToken instance from CIP68NFT instance. "),(0,r.kt)("p",null,"In ",(0,r.kt)("strong",{parentName:"p"},"Line 22"),", get the Asset instance from CIP68ReferenceToken instance. This Asset instance can be used to mint the reference token."),(0,r.kt)("p",null,"In ",(0,r.kt)("strong",{parentName:"p"},"Line 25"),", get the Asset instance from CIP68NFT instance. This Asset instance can be used to mint the user token."),(0,r.kt)("p",null,"In ",(0,r.kt)("strong",{parentName:"p"},"Line 28"),", get the Datum from CIP68ReferenceToken instance. This Datum instance can be used to mint the reference token with CIP68 metadata\nin datum."),(0,r.kt)("p",null,"In ",(0,r.kt)("strong",{parentName:"p"},"Line 37"),", create a ScriptTx instance and define to mint the reference token and user token."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},' //Minting Script\nPlutusV2Script mintingScript = PlutusV2Script.builder()\n                .type("PlutusScriptV2")\n                .cborHex("...")\n                .build();\n\n//Define CIP-68 compatible NFT metadata\nCIP68NFT nft = CIP68NFT.create()\n                .name("MyCIP68NFT")\n                .image("https://xyz.com/image.png")\n                .description("A sample CIP-68 NFT")\n                .addFile(CIP68File.create()\n                        .mediaType("image/png")\n                        .name("image1.png")\n                        .src("https://xyz.com/image.png")\n                );\n\n//Get CIP68ReferenceToken from CIP68NFT\nCIP68ReferenceToken referenceToken = nft.getReferenceToken();\n        \n//Create Reference Token Asset with quantity 1\nAsset referenzToken = referenceToken.getAsset();\n        \n//Create User Token Asset with quantity 1\nAsset userToken = nft.getAsset(BigInteger.valueOf(1));\n\n//Get Datum from CIP68ReferenceToken\nPlutusData datumMetadata = referenceToken.getDatumAsPlutusData();\n\n//Receiver of the user token\nString userTokenReceiver = receiverAddr;\n        \n//Receiver of the reference token which is the minting script address\nString referenceTokenReceiver = AddressProvider.getEntAddress(mintingScript, Networks.preprod()).toBech32();\n\n//Define ScriptTx to mint Reference Token and User Token\nScriptTx scriptTx = new ScriptTx()\n        .mintAsset(mintingScript, List.of(referenzToken), PlutusData.unit(), referenceTokenReceiver, datumMetadata)\n        .mintAsset(mintingScript, List.of(userToken),PlutusData.unit(), userTokenReceiver);\n        \nResult<String> result = quickTxBuilder.compose(scriptTx)\n                .feePayer(account.baseAddress())\n                .withSigner(SignerProviders.signerFrom(account))\n                .completeAndWait(System.out::println);\n')),(0,r.kt)("h3",{id:"cip68-ft-datum-metadata-api"},"CIP68 FT Datum Metadata Api"),(0,r.kt)("p",null,"CIP68FT is used to mint CIP68 compatible Fungible Tokens (333). The following example shows how to create a CIP68FT instance.\nFrom CIP68FT instance, you can get a CIP68ReferenceToken instance. The remaining steps are similar to previous section (CIP68NFT)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'CIP68FT ft = CIP68FT.create()\n                .name("SampleFungibleToken")\n                .ticker("SFT")\n                .url("https://xyz.com")\n                .logo("https://xyz.com/logo.png")\n                .decimals(6)\n                .description("Sample CIP-68 FT");\n')),(0,r.kt)("h3",{id:"cip68-rft-datum-metadata-api"},"CIP68 RFT Datum Metadata Api"),(0,r.kt)("p",null,"CIP68RFT is used to mint CIP68 compatible Rich Fungible Tokens (444). The following example shows how to create a CIP68RFT instance.\nFrom CIP68RFT instance, you can get a CIP68ReferenceToken instance. The remaining steps are similar to CIP68NFT section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'CIP68RFT rft = CIP68RFT.create()\n                .name("SampleRichFungibleToken")\n                .image("https://xyz.com/image.png")\n                .description("Sample CIP-68 RFT")\n                .addFile(CIP68File.create()\n                        .mediaType("image/png")\n                        .name("image.png")\n                        .src("https://xyz.com/image.png")\n                )\n                .property("<key1>", "<key1Value>");\n')))}m.isMDXComponent=!0}}]);