"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[469],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),l=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=r,v=p["".concat(o,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(v,c(c({ref:t},u),{},{components:n})):a.createElement(v,c({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var l=2;l<i;l++)c[l]=n[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6545:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const i={description:"Key apis of Cardano Client Lib",sidebar_label:"Key Apis",sidebar_position:10},c="Key Apis",s={unversionedId:"gettingstarted/key-apis",id:"gettingstarted/key-apis",title:"Key Apis",description:"Key apis of Cardano Client Lib",source:"@site/docs/gettingstarted/key-apis.md",sourceDirName:"gettingstarted",slug:"/gettingstarted/key-apis",permalink:"/docs/gettingstarted/key-apis",draft:!1,editUrl:"https://github.com/bloxbean/cardano-client/tree/main/docs/docs/gettingstarted/key-apis.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{description:"Key apis of Cardano Client Lib",sidebar_label:"Key Apis",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Multi-sig transfer with Native script",permalink:"/docs/gettingstarted/multisig-quickstart"},next:{title:"Build",permalink:"/docs/gettingstarted/build"}},o={},l=[{value:"Account API Usage",id:"account-api-usage",level:2},{value:"Create a New Account",id:"create-a-new-account",level:3},{value:"Get base address, enterprise address, mnemonic",id:"get-base-address-enterprise-address-mnemonic",level:3},{value:"Get Account from Mnemonic",id:"get-account-from-mnemonic",level:3},{value:"Create Blockfrost Backend Service and get other services",id:"create-blockfrost-backend-service-and-get-other-services",level:2},{value:"Simple ADA Payment (Composable functions)",id:"simple-ada-payment-composable-functions",level:2},{value:"Simple ADA Payment transaction (High Level Api)",id:"simple-ada-payment-transaction-high-level-api",level:2},{value:"Native Token transfer",id:"native-token-transfer",level:2},{value:"ScriptHash",id:"scripthash",level:2},{value:"Token Minting transaction",id:"token-minting-transaction",level:2},{value:"Metadata",id:"metadata",level:2},{value:"UtxoSelectionStrategy",id:"utxoselectionstrategy",level:2}],u={toc:l};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"key-apis"},"Key Apis"),(0,r.kt)("h2",{id:"account-api-usage"},"Account API Usage"),(0,r.kt)("h3",{id:"create-a-new-account"},"Create a New Account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Account account = new Account();   //Create a Mainnet account\n\nAccount account = new Account(Networks.mainnet());   //Create a Mainnet account\n\nAccount account = new Account(Networks.testnet());  //Create a Testnet account\n")),(0,r.kt)("h3",{id:"get-base-address-enterprise-address-mnemonic"},"Get base address, enterprise address, mnemonic"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"String baseAddress = account.baseAddress();  //Base address at index=0\n\nString enterpriseAddress = account.account.enterpriseAddress();  //Enterprise address at index = 0\n\nString mnemonic = account.mnemonic();  //Get Mnemonic\n")),(0,r.kt)("h3",{id:"get-account-from-mnemonic"},"Get Account from Mnemonic"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'String mnemonic = "...";\nAccount account = new Account(mnemonic);  //Create a Mainnet account from Mnemonic\n\nAccount account = new Account(Networks.testnet(), mnemonic); //Create a Testnet account from Mnemonic\n')),(0,r.kt)("h2",{id:"create-blockfrost-backend-service-and-get-other-services"},"Create Blockfrost Backend Service and get other services"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"BackendService backendService =\n                new BFBackendService(Constants.BLOCKFROST_TESTNET_URL, <BF_PROJECT_ID>);               \n\nFeeCalculationService feeCalculationService = backendService.getFeeCalculationService();\nTransactionHelperService transactionHelperService = backendService.getTransactionHelperService();\nTransactionService transactionService = backendService.getTransactionService();\nBlockService blockService = backendService.getBlockService();\nAssetService assetService = backendService.getAssetService();\nUtxoService utxoService = backendService.getUtxoService();\nMetadataService metadataService = backendService.getMetadataService();\nEpochService epochService = backendService.getEpochService();\nAddressService addressService = backendService.getAddressService();\n")),(0,r.kt)("h2",{id:"simple-ada-payment-composable-functions"},"Simple ADA Payment (Composable functions)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'//Define expected outputs\nOutput output1 = Output.builder()\n        .address(receiverAddress1)\n        .assetName(LOVELACE)\n        .qty(adaToLovelace(10))\n        .build();\n\n Output output2 = Output.builder()\n        .address(receiverAddress2)\n        .assetName(LOVELACE)\n        .qty(adaToLovelace(20))\n        .build();\n\n // Create a CIP20 message metadata\n MessageMetadata metadata = MessageMetadata.create()\n                    .add("First transfer transaction");\n\n // Define TxBuilder\n TxBuilder txBuilder = output1.outputBuilder()\n        .and(output2.outputBuilder())\n        .buildInputs(createFromSender(senderAddress, senderAddress))\n        .andThen(metadataProvider(metadata))\n        .andThen(balanceTx(senderAddress, 1));\n\n UtxoSupplier utxoSupplier = new DefaultUtxoSupplier(backendService.getUtxoService());\n ProtocolParamsSupplier protocolParamsSupplier = new DefaultProtocolParamsSupplier(backendService.getEpochService());\n\n //Build and sign the transaction\n Transaction signedTransaction = TxBuilderContext.init(utxoSupplier, protocolParamsSupplier)\n                            .buildAndSign(txBuilder, signerFrom(senderAccount));\n //Submit the transaction\n Result<String> result = backendService.getTransactionService().submitTransaction(signedTransaction.serialize());\n')),(0,r.kt)("h2",{id:"simple-ada-payment-transaction-high-level-api"},"Simple ADA Payment transaction (High Level Api)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'  PaymentTransaction paymentTransaction = PaymentTransaction.builder()\n                                            .sender(sender)\n                                            .receiver(receiver)\n                                            .amount(BigInteger.valueOf(1500000))\n                                            .unit("lovelace")\n                                            .build();\n          \n  //Calculate Time to Live        \n  long ttl = blockService.getLastestBlock().getValue().getSlot() + 1000;\n  TransactionDetailsParams detailsParams =\n                TransactionDetailsParams.builder()\n                        .ttl(ttl)\n                        .build();\n\n  //Calculate fee\n  BigInteger fee\n          = feeCalculationService.calculateFee(paymentTransaction, detailsParams, null);\n  paymentTransaction.setFee(fee);                                        \n\n  Result<String> result = \n                    transactionHelperService.transfer(paymentTransaction, detailsParam);\n\n  if(result.isSuccessful())\n      System.out.println("Transaction Id: " + result.getValue());\n')),(0,r.kt)("h2",{id:"native-token-transfer"},"Native Token transfer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},' PaymentTransaction paymentTransaction =\n                PaymentTransaction.builder()\n                        .sender(sender)\n                        .receiver(receiver)\n                        .amount(BigInteger.valueOf(12))\n                        .unit("329728f73683fe04364631c27a7912538c116d802416ca1eaf2d7a96736174636f696e")\n                        .build();\n\n //Calculate Time to Live        \n  long ttl = blockService.getLastestBlock().getValue().getSlot() + 1000;\n  TransactionDetailsParams detailsParams =\n                TransactionDetailsParams.builder()\n                        .ttl(ttl)\n                        .build();\n\n  //Calculate fee\n  BigInteger fee\n          = feeCalculationService.calculateFee(paymentTransaction, detailsParams, null);\n  paymentTransaction.setFee(fee); \n                                            \n Result<String> result = transactionHelperService.transfer(paymentTransaction, detailsParam);\n\n if(result.isSuccessful())\n     System.out.println("Transaction Id: " + result.getValue());\n')),(0,r.kt)("h2",{id:"scripthash"},"ScriptHash"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Example: 1\n\nScriptPubkey scriptPubkey = new ScriptPubkey("ad7a7b87959173fc9eac9a85891cc93892f800dd45c0544128228884")\nString policyId = scriptPubkey.getPolicyId();\n\nExample: 2\n\nScriptPubkey scriptPubkey1 = ...;\nSecretKey sk1 = ...;\n\nScriptPubkey scriptPubkey2 = ...;\nSecretKey sk2 = ...;\n\nScriptPubkey scriptPubkey3 = ...;\nSecretKey sk3 = ...;\n\nScriptAtLeast scriptAtLeast = new ScriptAtLeast(2)\n                .addScript(scriptPubkey1)\n                .addScript(scriptPubkey2)\n                .addScript(scriptPubkey3);\n\nString policyId = scriptAtLeast.getPolicyId();\n\n')),(0,r.kt)("h2",{id:"token-minting-transaction"},"Token Minting transaction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'MultiAsset multiAsset = new MultiAsset();\nmultiAsset.setPolicyId(policyId);\n\nAsset asset = new Asset("testtoken"), BigInteger.valueOf(250000));\nmultiAsset.getAssets().add(asset);\n\nMintTransaction mintTransaction = MintTransaction.builder()\n                        .sender(sender)\n                        .receiver(receiver)\n                        .mintAssets(Arrays.asList(multiAsset))\n                        .policyScript(scriptAtLeast)\n                        .policyKeys(Arrays.asList(sk2, sk3))\n                        .build();\n                        \n//Calculate Time to Live        \nlong ttl = blockService.getLastestBlock().getValue().getSlot() + 1000;\nTransactionDetailsParams detailsParams =\n                TransactionDetailsParams.builder()\n                        .ttl(ttl)\n                        .build();\n\n//Calculate fee\nBigInteger fee\n          = feeCalculationService.calculateFee(mintTransaction, detailsParams, null);\nmintTransaction.setFee(fee);\n\nResult<String> result = transactionHelperService.mintToken(mintTransaction,\n                TransactionDetailsParams.builder().ttl(getTtl()).build());\n')),(0,r.kt)("h2",{id:"metadata"},"Metadata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CBORMetadataMap productDetailsMap\n                = new CBORMetadataMap()\n                .put("code", "PROD-800")\n                .put("slno", "SL20000039484");\n\nCBORMetadataList tagList\n                = new CBORMetadataList()\n                .add("laptop")\n                .add("computer");\n\nMetadata metadata = new CBORMetadata()\n                .put(new BigInteger("670001"), productDetailsMap)\n                .put(new BigInteger("670002"), tagList);\nPaymentTransaction paymentTransaction =\n                PaymentTransaction.builder()\n                        ...\n                        .build();\n\nlong ttl = blockService.getLastestBlock().getValue().getSlot() + 1000;\nTransactionDetailsParams detailsParams =\n                TransactionDetailsParams.builder()\n                        .ttl(ttl)\n                        .build();\n\n//Also add metadata for fee calculation\nBigInteger fee = feeCalculationService.calculateFee(paymentTransaction, detailsParams, metadata);\npaymentTransaction.setFee(fee);\n\n//Send metadata as 3rd parameter\nResult<String> result\n                = transactionHelperService.transfer(paymentTransaction, detailsParams, metadata);\n')),(0,r.kt)("h2",{id:"utxoselectionstrategy"},"UtxoSelectionStrategy"),(0,r.kt)("p",null,'The utxo selection strategy can be changed by providing a custom implementation of "UtxoSelectionStrategy" interface. By default, the high level api like TransactionHelperService uses a default out-of-box implementation "DefaultUtxoSelectionStrategyImpl". The default strategy is too simple and finds all required utxos sequentially. But it may not be efficient for some usecases.'),(0,r.kt)("p",null,"You can use a custom or different implementation of UtxoSelectionStrategy to change the default utxo selection behaviour."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"UtxoSupplier utxoSupplier = new DefaultUtxoSupplier(utxoService);\nProtocolParamsSupplier protocolParamsSupplier = new DefaultProtocolParamsSupplier(epochService);\n\n//Create TransactionHelperService with LargestFirst\nTransactionBuilder transactionBuilder = new TransactionBuilder(new LargestFirstUtxoSelectionStrategy(utxoSupplier), protocolParamsSupplier);\nTransactionHelperService transactionHelperService = new TransactionHelperService(transactionBuilder, new DefaultTransactionProcessor(transactionService));\n\n//Get FeeCalculationService using the above TransactionHelperService\nFeeCalculationService feeCalculationService = backendService.getFeeCalculationService(transactionHelperService);\n")))}d.isMDXComponent=!0}}]);